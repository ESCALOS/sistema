/*--------------MODIFICAR TABLA CECO------------------------------------------------*/
/*-----Aumentar---------------*/
CREATE TRIGGER `aumentar_monto_ceco` AFTER INSERT ON `ceco_allocation_amounts`
 FOR EACH ROW UPDATE cecos SET amount = amount + new.allocation_amount, updated_at = CURRENT_TIMESTAMP WHERE id = new.ceco_id
 /*--------Actualizar y Disminuir----------*/
CREATE TRIGGER `actualizar_monto_ceco` AFTER UPDATE ON `ceco_allocation_amounts`
 FOR EACH ROW IF(new.is_canceled) THEN
 UPDATE cecos SET amount = amount-old.allocation_amount, updated_at = CURRENT_TIMESTAMP WHERE id = new.ceco_id;
 ELSE
 UPDATE cecos SET amount = amount + new.allocation_amount-old.allocation_amount, updated_at = CURRENT_TIMESTAMP WHERE id = new.ceco_id;
 END IF


/*--------MODIFICAR TABLA TRACTOR E IMPLEMENTO-------*/
/*--------Aumentar---------------*/
CREATE TRIGGER `aumentar_horas` AFTER INSERT ON `tractor_reports`
 FOR EACH ROW BEGIN
/*------Tractores----------*/
UPDATE tractors SET hour_meter = hour_meter+new.hours, updated_at = CURRENT_TIMESTAMP WHERE id = new.tractor_id;
/*--------Implementos-----------------*/
UPDATE implements SET hours = hours+(new.hours)*0.85, updated_at = CURRENT_TIMESTAMP WHERE id = new.implement_id;
END

/*--------Actualizar y Disminuir---------------*/
CREATE TRIGGER `actualizar_horas` AFTER UPDATE ON `tractor_reports`
 FOR EACH ROW BEGIN
IF (new.is_canceled) THEN
/*------Tractores----------*/
UPDATE tractors SET hour_meter = hour_meter-old.hours, updated_at = CURRENT_TIMESTAMP WHERE id = new.tractor_id;
/*--------Implementos-----------------*/
UPDATE implements SET hours = hours-(old.hours)*0.85, updated_at = CURRENT_TIMESTAMP WHERE id = new.implement_id;
ELSE
/*------Tractores----------*/
UPDATE tractors SET hour_meter = hour_meter-(old.hours+new.hours), updated_at = CURRENT_TIMESTAMP WHERE id = new.tractor_id;
/*--------Implementos-----------------*/
UPDATE implements SET hours = hours+(old.hours-new.hours)*0.85, updated_at = CURRENT_TIMESTAMP WHERE id = new.implement_id;
END IF;
END


/*------------STOCK MÍNIMO--------------------------------*/
/*-----------INGRESO Y SALIDA------------------------------*/
CREATE TRIGGER `aumentar_stock_minimo` AFTER INSERT ON `min_stock_details`
 FOR EACH ROW IF(new.movement="INGRESO") THEN
UPDATE min_stocks SET current_quantity = current_quantity + new.quantity, price = price + new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
ELSE
UPDATE min_stocks SET current_quantity = current_quantity - new.quantity, price = price - new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
END IF
/*--------ACTUALIZAR----------------------------------------*/
CREATE TRIGGER `actualizar_aumento_stock_minimo` AFTER UPDATE ON `min_stock_details`
 FOR EACH ROW IF(new.movement="INGRESO") THEN
IF(new.is_canceled) THEN
UPDATE min_stocks SET current_quantity = current_quantity - old.quantity, price = price - old.price WHERE item_id = old.item_id AND warehouse_id = old.warehouse_id;
ELSE
UPDATE min_stocks SET current_quantity = current_quantity - old.quantity+new.quantity, price = price - old.price + new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
END IF;
ELSE
IF(new.is_canceled) THEN
UPDATE min_stocks SET current_quantity = current_quantity + new.quantity, price = price + new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
ELSE
UPDATE min_stocks SET current_quantity = current_quantity + old.quantity-new.quantity, price = price + old.price - new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
END IF;
END IF
/*----------------Actualizar horas en la tabla component_implements los componentes -----------*/
CREATE TRIGGER `aumetar _horas_componentes` AFTER UPDATE ON `implements`
 FOR EACH ROW BEGIN
DECLARE var_final INT DEFAULT 0;
DECLARE var_componente INT;
DECLARE cursor1 CURSOR FOR SELECT component_id FROM component_implement_model WHERE implement_model_id = old.implement_model_id;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_final = 1;
OPEN cursor1;
bucle: LOOP
	FETCH cursor1 INTO var_componente;
    IF var_final = 1 THEN
    	LEAVE bucle;
    END IF;

    IF EXISTS (SELECT * FROM component_implement WHERE implement_id = new.id AND component_id = var_componente AND (state = 'PENDIENTE' OR state = 'ORDENADO')) THEN
    UPDATE component_implement SET hours = hours + (new.hours-old.hours) WHERE implement_id = new.id AND component_id = var_componente;
ELSE
    	INSERT INTO component_implement(component_id,implement_id,hours) VALUES (var_componente,new.id,(new.hours-old.hours));

END IF;

END LOOP bucle;
CLOSE cursor1;
END
/*---------------Agregar a lista de materiales necesarios-------------*/
CREATE TRIGGER `materiales_para_solicitar` AFTER UPDATE ON `component_implement`
 FOR EACH ROW BEGIN
DECLARE request INT;
DECLARE responsable INT;
SELECT user_id INTO responsable FROM implements WHERE id = new.implement_id;
/*-----Comprobar si el componente pasó sus horas-----*/
IF EXISTS (SELECT * FROM component_implement ci INNER JOIN components c WHERE ci.implement_id = new.implement_id AND ci.component_id = new.component_id AND ci.hours > c.lifespan) THEN
/*----Comprobar si existe la solicitud de pedido para el implemento*/
IF NOT EXISTS(SELECT * FROM order_requests WHERE user_id = responsable AND implement_id = new.implement_id AND state = 'PENDIENTE') THEN
INSERT INTO order_requests(user_id,implement_id) VALUES (responsable,new.implement_id);
END IF;
END IF;
END

/*---------------Crear tabla afectados_por_ingreso_operador----------------------*/
id, operator_stock_id, operator_stock_details_id, operador_stock_assigned_id, stock_id


/*--------Evento para liberar el material-----------------------------------*/
CREATE DEFINER=`root`@`localhost` EVENT `liberar_material_event` ON SCHEDULE EVERY 1 MONTH STARTS '2022-05-18 09:00:54' ON COMPLETION NOT PRESERVE ENABLE DO UPDATE operator_stock_assigned SET state = "LIBERADO", quantity = 0, price = 0 WHERE DATE_ADD(updated_at, INTERVAL 3 MONTH) < CURRENT_TIMESTAMP AND quantity > 0

/*-----------------Liberar material---------------------------------------------*/
CREATE TRIGGER `liberar_material` AFTER UPDATE ON `operator_stock_assigned`
 FOR EACH ROW IF new.state = "LIBERADO" THEN
INSERT INTO free_stocks_details (code_user, item_id, movement, quantity, price, warehouse_id, operator_stock_assigned_id) VALUES (old.code_user, old.item_id, 'INGRESO', old.quantity, old.price, old.warehouse_id,old.id);
END IF

/*----------Acumular el stock liberado---------*/
CREATE TRIGGER `acumular_stock_liberado` BEFORE INSERT ON `free_stocks_details`
 FOR EACH ROW BEGIN
IF new.movement = "INGRESO" THEN
IF EXISTS(SELECT * FROM free_stocks WHERE item_id =  new.item_id AND warehouse_id = new.warehouse_id) THEN
UPDATE free_stocks SET quantity = quantity + new.quantity, price = price + new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
ELSE
INSERT INTO free_stocks (item_id,quantity,price,warehouse_id) VALUES (new.item_id,new.quantity,new.price, new.warehouse_id);
END IF;
INSERT INTO operator_stocks_details(code_user, item_id, movement, quantity, price, warehouse_id,state) VALUES (new.code_user, new.item_id, 'SALIDA', new.quantity, new.price, new.warehouse_id, 'LIBERADO');
/*-----------END INGRESO-------------------*/
ELSE
/*-----------BEGIN SALIDA-----------------*/
UPDATE free_stocks SET quantity = quantity - new.quantity, price = price - new.price  WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
/*----------------END SALIDA---------------*/
END IF;
END

/*---------Asignar el stock al operador------------------------*/
BEGIN
DECLARE op_stock INT;
DECLARE op_assigned INT;
DECLARE stock_general INT;
DECLARE cantidad double;
DECLARE cantidad_sobrante double;
DECLARE precio double;
DECLARE precio_sobrante double;
IF new.movement = "INGRESO" THEN
/*-----------INGRESO DEL MATERIAL--------------------*/
/*--Insertar material acumulado del operador--*/
IF EXISTS (SELECT * FROM operator_stocks WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id) THEN
UPDATE operator_stocks
SET quantity = quantity+new.quantity, price = price+new.price WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id;
SELECT id INTO op_stock FROM operator_stocks ORDER BY updated_at DESC LIMIT 1;
ELSE
INSERT INTO operator_stocks(code_user, item_id, quantity, price, warehouse_id) VALUES (new.code_user, new.item_id, new.quantity, new.price, new.warehouse_id);
SELECT MAX(id) INTO op_stock FROM operator_stocks;
END IF;
/*--Insertar material al acumulado general del almacen--*/
IF EXISTS (SELECT * FROM stocks WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id) THEN
UPDATE stocks SET quantity = quantity + new.quantity, price = price + new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
SELECT id INTO stock_general FROM stocks ORDER BY updated_at DESC LIMIT 1;
ELSE
INSERT INTO stocks (item_id, quantity, price, warehouse_id) VALUES (new.item_id, new.quantity, new.price, new.warehouse_id);
SELECT MAX(id) INTO stock_general FROM stocks;
END IF;
/*-------Material asignado al operador por fecha para descontar--------*/
INSERT INTO operator_stock_assigned(code_user, item_id, quantity, unit_price,price, warehouse_id) VALUES (new.code_user, new.item_id, new.quantity,(new.price/new.quantity), new.price, new.warehouse_id);
SELECT MAX(id) INTO op_assigned FROM operator_stock_assigned;
ELSEIF new.movement = "SALIDA" THEN
/*-------SALIDA DEL MATERIAL-----------*/
/*-----Acumulado del operador-----*/
UPDATE operator_stocks SET quantity = quantity - new.quantity, price = price-new.price WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id;
SELECT id INTO op_stock FROM operator_stocks ORDER BY updated_at DESC LIMIT 1;
IF new.state = "CONFIRMADO" THEN
/*---Descontar items por antiguedad----*/
SELECT quantity,price INTO cantidad,precio FROM operator_stock_assigned WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id AND quantity <> 0 ORDER BY created_at ASC LIMIT 1;
SELECT new.quantity,new.price INTO cantidad_sobrante,precio_sobrante;
WHILE cantidad_sobrante > cantidad DO
UPDATE operator_stock_assigned SET quantity = 0, price = 0 WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id AND quantity <> 0 ORDER BY created_at ASC LIMIT 1;
SELECT (cantidad_sobrante-cantidad),(precio_sobrante-precio) INTO cantidad_sobrante,precio_sobrante;
SELECT quantity,price INTO cantidad,precio FROM operator_stock_assigned WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id AND quantity <> 0 ORDER BY created_at ASC LIMIT 1;
END WHILE;
IF cantidad >= cantidad_sobrante THEN
UPDATE operator_stock_assigned SET quantity = quantity - cantidad_sobrante, price = price - precio_sobrante WHERE code_user = new.code_user AND item_id = new.item_id AND warehouse_id = new.warehouse_id AND quantity <> 0 ORDER BY created_at ASC LIMIT 1;
END IF;
SELECT id INTO op_assigned FROM operator_stock_assigned ORDER BY updated_at DESC LIMIT 1;
/*--------Descontar el stock general---*/
UPDATE stocks SET quantity = quantity - new.quantity, price = price - new.price WHERE item_id = new.item_id AND warehouse_id = new.warehouse_id;
SELECT id INTO stock_general FROM stocks ORDER BY updated_at DESC LIMIT 1;
ELSE
SELECT id INTO op_assigned FROM operator_stock_assigned WHERE state = "LIBERADO" ORDER BY updated_at DESC LIMIT 1;
END IF;
/*----------END SALIDA----------*/
END IF;
INSERT INTO afectados_por_ingreso_operador (operator_stock_id, operator_stock_details_id, operador_stock_assigned_id, stock_id) VALUES (op_stock, new.id, op_assigned, stock_general);
END
